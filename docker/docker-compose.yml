name: school-management

services:
  # PostgreSQL Database
  postgres:
    image: postgres:latest
    container_name: school-management-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - school-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # # Backend API service
  # api:
  #   build:
  #     context: ..
  #     dockerfile: ./apps/api/Dockerfile
  #   container_name: school-management-api
  #   environment:
  #     - NODE_ENV=development
  #     - DB_HOST=postgres
  #     - DB_PORT=5432
  #     - DB_USERNAME=postgres
  #     - DB_PASSWORD=postgres
  #     - DB_DATABASE=school_management
  #     - JWT_SECRET=your_jwt_secret_key_here
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   volumes:
  #     - ../../apps/api:/usr/src/app/api
  #     - ../../node_modules:/usr/src/app/node_modules
  #   networks:
  #     - school-network
  #   command: npm run dev --workspace=api

  # # Frontend service
  # web:
  #   build:
  #     context: ..
  #     dockerfile: ./apps/web/Dockerfile
  #   container_name: school-management-web
  #   environment:
  #     - REACT_APP_API_URL=http://localhost:3000
  #   ports:
  #     - "3001:3000"
  #   volumes:
  #     - ../../apps/web:/usr/src/app/web
  #     - ../../node_modules:/usr/src/app/node_modules
  #   depends_on:
  #     - api
  #   networks:
  #     - school-network
  #   command: npm run dev --workspace=web

networks:
  school-network:
    driver: bridge

volumes:
  postgres_data:
